{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.arange(0, 5, 0.1) #create x = [0..5] in 0.1 increments\n",
    "y = np.sin(x)            #y = sin(x)\n",
    "plt.plot(x,y)            #make a plot\n",
    "plt.xlabel('x')          #label x axis\n",
    "plt.ylabel('sin(x)')     #label y axis\n",
    "plt.show()               #show the plot on the screen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save an image as png\n",
    "x = np.arange(0, 5, 0.1) #create x = [0..5] in 0.1 increments\n",
    "y = np.sin(x)            #y = sin(x)\n",
    "plt.plot(x,y)            #make a plot\n",
    "plt.xlabel('x')          #label x axis\n",
    "plt.ylabel('sin(x)')     #label y axis\n",
    "plt.savefig('sinx.png', bbox_inches=\"tight\", dpi=600) #Save figure as png"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save an image as pdf\n",
    "x = np.arange(0, 5, 0.1) #create x = [0..5] in 0.1 increments\n",
    "y = np.sin(x)            #y = sin(x)\n",
    "plt.plot(x,y)            #make a plot\n",
    "plt.xlabel('x')          #label x axis\n",
    "plt.ylabel('sin(x)')     #label y axis\n",
    "plt.savefig('sinx.pdf', bbox_inches=\"tight\", dpi=600) #Save figure as png\n",
    "            #can change to .pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Make a multipanel plot with matplotlib\n",
    "x = np.linspace(0,2*np.pi,100)\n",
    "print(x[-1],2*np.pi)\n",
    "\n",
    "y = np.sin(x)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
